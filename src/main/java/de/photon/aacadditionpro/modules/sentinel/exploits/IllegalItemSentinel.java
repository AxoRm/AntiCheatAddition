package de.photon.aacadditionpro.modules.sentinel.exploits;

import de.photon.aacadditionpro.modules.sentinel.SentinelModule;
import de.photon.aacadditionpro.user.User;
import lombok.val;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerItemConsumeEvent;
import org.bukkit.inventory.ItemStack;

abstract class IllegalItemSentinel extends SentinelModule implements Listener
{
    protected IllegalItemSentinel(String restString)
    {
        super(restString);
    }

    @EventHandler(ignoreCancelled = true)
    public void onInventoryClick(InventoryClickEvent event)
    {
        val user = User.getUser(event.getWhoClicked().getUniqueId());
        if (User.isUserInvalid(user, this)) return;

        val stack = event.getCursor();

        if (stack != null && isIllegalStack(stack)) {
            // Cancel the click, remove any similar items and detect.
            event.setCancelled(true);
            user.getPlayer().getInventory().remove(stack);
            detection(user.getPlayer());
        }
    }

    @EventHandler(ignoreCancelled = true)
    public void onPlayerDropItem(PlayerDropItemEvent event)
    {
        val user = User.getUser(event.getPlayer().getUniqueId());
        if (User.isUserInvalid(user, this)) return;

        val stack = event.getItemDrop().getItemStack();

        if (isIllegalStack(stack)) {
            // Cancel the drop, remove any similar items and detect.
            event.setCancelled(true);
            user.getPlayer().getInventory().remove(stack);
            detection(user.getPlayer());
        }
    }

    @EventHandler(ignoreCancelled = true)
    public void onEntityPickupItem(EntityPickupItemEvent event)
    {
        if (isIllegalStack(event.getItem().getItemStack())) {
            event.setCancelled(true);
            event.getItem().setPickupDelay(20000);
            event.getItem().remove();
        }
    }

    @EventHandler(ignoreCancelled = true)
    public void onPlayerItemConsume(PlayerItemConsumeEvent event)
    {
        val user = User.getUser(event.getPlayer().getUniqueId());
        if (User.isUserInvalid(user, this)) return;

        if (isIllegalStack(event.getItem())) {
            event.setCancelled(true);
            user.getPlayer().getInventory().remove(event.getItem());
            detection(user.getPlayer());
        }
    }

    abstract boolean isIllegalStack(ItemStack stack);
}
