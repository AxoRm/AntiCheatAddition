package de.photon.anticheataddition.modules.sentinel.exploits;

import de.photon.anticheataddition.ServerVersion;
import de.photon.anticheataddition.modules.ModuleLoader;
import lombok.val;
import net.md_5.bungee.api.chat.BaseComponent;
import net.md_5.bungee.api.chat.ClickEvent;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.jetbrains.annotations.NotNull;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public class BookPageSentinel extends IllegalItemSentinel
{
    public static final BookPageSentinel INSTANCE = new BookPageSentinel();

    private final int maxPageCount = loadInt(".max_page_count", 250);
    private final boolean disallowOpenFile = loadBoolean(".disallow_open_file", true);
    private final List<String> disallowedCommands = loadStringList(".disallowed_commands").stream().map(String::toLowerCase).collect(Collectors.toUnmodifiableList());

    private BookPageSentinel()
    {
        super("Exploits.BookPage");
    }

    @Override
    boolean isIllegalStack(@NotNull ItemStack stack)
    {
        if (stack.getType() != Material.BOOK || !stack.hasItemMeta()) return false;

        final BookMeta meta = (BookMeta) stack.getItemMeta();
        if (meta == null) return false;
        if (meta.getPageCount() > maxPageCount) return true;

        val clickEvents = meta.spigot().getPages().stream()
                              .flatMap(Arrays::stream)
                              .map(BaseComponent::getClickEvent)
                              .filter(Objects::nonNull)
                              .collect(Collectors.toUnmodifiableList());

        if (disallowOpenFile &&
            // Any ClickEvent action opens a file.
            clickEvents.stream().map(ClickEvent::getAction).anyMatch(action -> action == ClickEvent.Action.OPEN_FILE)) return true;

        return meta.spigot().getPages().stream().flatMap(Arrays::stream).map(BaseComponent::getClickEvent)
                   // Has ClickEvent that runs a command.
                   .filter(Objects::nonNull)
                   .filter(event -> event.getAction() == ClickEvent.Action.RUN_COMMAND)
                   // Get the command.
                   .map(ClickEvent::getValue)
                   // Make sure we test all cases and formatting.
                   .map(String::strip)
                   .map(String::toLowerCase)
                   // Remove leading slashes.
                   .map(command -> command.charAt(0) == '/' ? command.substring(1) : command)
                   // If any command in the book starts with a disallowedCommand, the book is evil.
                   .anyMatch(command -> disallowedCommands.stream().anyMatch(command::startsWith));
    }

    @Override
    protected ModuleLoader createModuleLoader()
    {
        return ModuleLoader.builder(this)
                           .setAllowedServerVersions(ServerVersion.MC115.getSupVersionsFrom())
                           .build();
    }
}
