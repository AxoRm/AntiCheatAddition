package de.photon.anticheataddition.modules.sentinel.exploits;

import de.photon.anticheataddition.ServerVersion;
import de.photon.anticheataddition.modules.ModuleLoader;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.entity.LingeringPotionSplashEvent;
import org.bukkit.event.entity.PotionSplashEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.PotionMeta;
import org.bukkit.potion.PotionEffect;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.List;

public abstract class IllegalPotionSentinel extends IllegalItemSentinel
{
    protected IllegalPotionSentinel(String restString)
    {
        super(restString);
    }

    /**
     * This method will get the {@link PotionEffect}s from an {@link ItemStack}.
     * It checks whether the {@link ItemStack} is any potion ({@link Material#POTION}, {@link Material#SPLASH_POTION} or {@link Material#LINGERING_POTION}) and
     * gets the {@link org.bukkit.inventory.meta.PotionMeta} from it to get the custom effects.
     */
    private static List<PotionEffect> getCustomPotionEffects(@Nullable ItemStack stack)
    {
        if (stack == null) return List.of();

        switch (stack.getType()) {
            case POTION, SPLASH_POTION, LINGERING_POTION -> {
                final PotionMeta meta = (PotionMeta) stack.getItemMeta();
                return meta == null ? List.of() : meta.getCustomEffects();
            }
            default -> {
                return List.of();
            }
        }
    }

    @Override
    protected final boolean isIllegalStack(@NotNull ItemStack stack)
    {
        return getCustomPotionEffects(stack).stream().anyMatch(this::isIllegalPotion);
    }

    @EventHandler(ignoreCancelled = true)
    public void onPotionSplash(PotionSplashEvent event)
    {
        // Disable any thrown potions.
        if (event.getPotion().getEffects().stream().anyMatch(this::isIllegalPotion)) event.setCancelled(true);
    }

    @EventHandler(ignoreCancelled = true)
    public void onLingeringPotionSplash(LingeringPotionSplashEvent event)
    {
        // Disable any thrown potions.
        if (event.getEntity().getEffects().stream().anyMatch(this::isIllegalPotion)) event.setCancelled(true);
    }

    protected abstract boolean isIllegalPotion(PotionEffect effect);

    @Override
    protected ModuleLoader createModuleLoader()
    {
        return ModuleLoader.builder(this)
                           // Potions are much different in 1.8.8
                           .setAllowedServerVersions(ServerVersion.NON_188_VERSIONS)
                           .build();
    }
}
