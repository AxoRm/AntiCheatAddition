package de.photon.anticheataddition.modules.sentinel.exploits;

import de.photon.anticheataddition.AntiCheatAddition;
import de.photon.anticheataddition.modules.sentinel.SentinelModule;
import de.photon.anticheataddition.user.User;
import lombok.val;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerItemConsumeEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.PotionMeta;
import org.bukkit.potion.PotionEffect;
import org.jetbrains.annotations.NotNull;

import java.util.List;

// This MUST be a public class, otherwise Spigot will not recognize the EventListeners!
public abstract class IllegalItemSentinel extends SentinelModule implements Listener
{
    protected IllegalItemSentinel(String restString)
    {
        super(restString);
    }

    /**
     * This method will get the {@link PotionEffect}s from an {@link ItemStack}.
     * It checks whether the {@link ItemStack} is any potion ({@link Material#POTION}, {@link Material#SPLASH_POTION} or {@link Material#LINGERING_POTION}) and
     * gets the {@link org.bukkit.inventory.meta.PotionMeta} from it to get the custom effects.
     */
    public static List<PotionEffect> getCustomPotionEffects(ItemStack stack)
    {
        if (stack == null || stack.getType() != Material.POTION && stack.getType() != Material.SPLASH_POTION && stack.getType() != Material.LINGERING_POTION) return List.of();

        final PotionMeta meta = (PotionMeta) stack.getItemMeta();
        if (meta == null) return List.of();
        return meta.getCustomEffects();
    }

    @EventHandler(ignoreCancelled = true)
    public void onInventoryClick(InventoryClickEvent event)
    {
        val user = User.getUser(event.getWhoClicked().getUniqueId());
        if (User.isUserInvalid(user, this)) return;

        val stack = event.getCursor();

        if (stack != null && isIllegalStack(stack)) {
            // Cancel the click, remove any similar items and detect.
            event.setCancelled(true);
            event.getInventory().remove(stack);
            removeItem(user.getPlayer(), stack);

            // Only detect if the player clicked their own inventory, otherwise someone might have placed that item in a chest long ago.
            if (event.getClickedInventory() != null && event.getClickedInventory().getType() == InventoryType.PLAYER) detection(user.getPlayer());
        }
    }

    @EventHandler(ignoreCancelled = true)
    public void onPlayerDropItem(PlayerDropItemEvent event)
    {
        val user = User.getUser(event.getPlayer().getUniqueId());
        if (User.isUserInvalid(user, this)) return;

        val stack = event.getItemDrop().getItemStack();

        if (isIllegalStack(stack)) {
            // Cancel the drop, remove any similar items and detect.
            event.setCancelled(true);
            removeItem(user.getPlayer(), stack);
            detection(user.getPlayer());
        }
    }

    @EventHandler(ignoreCancelled = true)
    public void onEntityPickupItem(EntityPickupItemEvent event)
    {
        if (isIllegalStack(event.getItem().getItemStack())) {
            event.setCancelled(true);
            event.getItem().setPickupDelay(20000);
            event.getItem().remove();
        }
    }

    @EventHandler(ignoreCancelled = true)
    public void onPlayerItemConsume(PlayerItemConsumeEvent event)
    {
        val user = User.getUser(event.getPlayer().getUniqueId());
        if (User.isUserInvalid(user, this)) return;

        if (isIllegalStack(event.getItem())) {
            event.setCancelled(true);
            removeItem(user.getPlayer(), event.getItem());
            detection(user.getPlayer());
        }
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event)
    {
        val user = User.getUser(event.getPlayer().getUniqueId());
        if (User.isUserInvalid(user, this)) return;

        if (event.getItem() != null && isIllegalStack(event.getItem())) {
            removeItem(user.getPlayer(), event.getItem());
            event.setCancelled(true);
            detection(user.getPlayer());
        }
    }

    protected abstract boolean isIllegalStack(@NotNull ItemStack stack);

    /**
     * Special removal method to make sure the item is removed even when bugged.
     */
    private static void removeItem(Player player, ItemStack stack)
    {
        player.getInventory().remove(stack);
        Bukkit.getScheduler().runTask(AntiCheatAddition.getInstance(), () -> player.getInventory().remove(stack));
        Bukkit.getScheduler().runTaskLater(AntiCheatAddition.getInstance(), () -> player.getInventory().remove(stack), 20L);
    }
}
